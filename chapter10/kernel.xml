<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-bootable-kernel" role="wrap">
  <?dbhtml filename="kernel.html"?>

  <sect1info condition="script">
    <productname>kernel</productname>
    <productnumber>&linux-version;</productnumber>
    <address>&linux-url;</address>
  </sect1info>

  <title>Linux-&linux-version;</title>

  <indexterm zone="ch-bootable-kernel">
    <primary sortas="a-Linux">Linux</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Этот пакет содержит ядро Linux.</para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&linux-knl-sbu;</seg>
        <seg>&linux-knl-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Установка ядра</title>

    <para>Сборка ядра состоит из нескольких этапов&mdash;настройка, компиляция и установка. Ознакомьтесь 
	с файлом <filename>README</filename> в дереве исходных тектов, чтобы узнать об альтернативных 
	способах настройки ядра.</para>

    <para>Подготовьте пакет к компиляции, выполнив следующую команду:</para>

<screen><userinput remap="pre">make mrproper</userinput></screen>

    <para>Выполнение этой команды гарантирует, что дерево исходников будет абсолютно чистым. 
	Разработчики ядра рекомендуют запускать эту команду перед каждой компиляцией. Не следует полагаться 
	на то, что дерево исходных текстов ядра будет чистым после распаковки.</para>

    <para>Существует несколько способов настройки параметров ядра. Обычно это делается с помощью 
	псевдографического интерфейса, например так:</para>

<screen role="nodump"><userinput>make menuconfig</userinput></screen>

    <variablelist>
      <title>Значения необязательных переменных окружения make:</title>

      <varlistentry>
        <term><parameter>LANG=&lt;переменная_LANG_хоста&gt; LC_ALL=</parameter></term>
        <listitem>
          <para>Устанавливает значение локали на то, которое используется на хосте. Это может 
		  понадобиться для правильного отображения интерфейса menuconfig с помощью ncurses в текстовой 
		  консоли Linux с UTF-8.</para>

          <para>Если это необходимо, обязательно замените значение
          <replaceable>&lt;переменной_LANG&gt;</replaceable> на значение переменной 
		  <envar>$LANG</envar> вашего хоста. В качестве альтернативы вы можете использовать 
		  значения переменных <envar>$LC_ALL</envar> или <envar>$LC_CTYPE</envar>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><command>make menuconfig</command></term>
        <listitem>
          <para>Эта команда запускаеи интерфейс на основе ncurses. Для использования других 
		  (графических) интерфейсов, выполните <command>make help</command>.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <!-- Support for compiling a keymap into the kernel is deliberately removed -->

    <para>Для получения общей информации о настройке параметров ядра, смотрите <ulink
    url="&hints-root;kernel-configuration.txt"/>. Книга BLFS содержит некоторую информацию о 
	требованиях к конфигурации ядра для поддержки пакетов, которые отсутствуют в LFS. Эта 
	информация доступна по ссылке <ulink url="&blfs-book;longindex.html#kernel-config-index"/>. 
	Дополнительную информацию о настройке и сборке ядра можно найти по адресу 
	<ulink url="http://www.kroah.com/lkn/"/>.</para>

    <note>
      <para>Хорошей отправной точкой для настройки ядра, может стать запуск команды 
	  <command>make defconfig</command>. В результате её выполнения будет создана базовая 
	  конфигурация с учётом архитектуры системы.</para>

      <para>Обязательно включите/отключите/настройте следующие параметры, иначе система может 
	  работаеть некорректно или вообще не загружаться:</para>

      <screen role="nodump" revision="sysv">Processor type and features ---&gt;
   [*] Build a relocatable kernel [CONFIG_RELOCATABLE]
   [*]   Randomize the address of the kernel image (KASLR) [CONFIG_RANDOMIZE_BASE]
General setup ---&gt;
   [ ] Compile the kernel with warnings as errors [CONFIG_WERROR]
   &lt; &gt; Enable kernel headers through /sys/kernel/kheaders.tar.xz [CONFIG_IKHEADERS]
General architecture-dependent options  ---&gt;
   [*] Stack Protector buffer overflow detection [CONFIG_STACKPROTECTOR]
   [*]   Strong Stack Protector [CONFIG_STACKPROTECTOR_STRONG]
Device Drivers  ---&gt;
  Graphics support ---&gt;
   Frame buffer Devices ---&gt;
      [*] Support for frame buffer devices ----
  Generic Driver Options  ---&gt;
   [ ] Support for uevent helper [CONFIG_UEVENT_HELPER]
   [*] Maintain a devtmpfs filesystem to mount at /dev [CONFIG_DEVTMPFS]
   [*]   Automount devtmpfs at /dev, after the kernel mounted the rootfs [CONFIG_DEVTMPFS_MOUNT]</screen>

      <screen role="nodump" revision="systemd">Processor type and features ---&gt;
   [*] Build a relocatable kernel [CONFIG_RELOCATABLE]
   [*]   Randomize the address of the kernel image (KASLR) [CONFIG_RANDOMIZE_BASE]
General setup ---&gt;
   [ ] Compile the kernel with warnings as errors [CONFIG_WERROR]
   [ ] Auditing Support [CONFIG_AUDIT]
   CPU/Task time and stats accounting ---&gt;
      [*] Pressure stall information tracking [CONFIG_PSI]
   &lt; &gt; Enable kernel headers through /sys/kernel/kheaders.tar.xz [CONFIG_IKHEADERS]
   [*] Control Group support [CONFIG_CGROUPS]   ---&gt;
      [*] Memory controller [CONFIG_MEMCG]
   [ ] Enable deprecated sysfs features to support old userspace tools [CONFIG_SYSFS_DEPRECATED]
   [*] Configure standard kernel features (expert users) [CONFIG_EXPERT] ---&gt;
      [*] open by fhandle syscalls [CONFIG_FHANDLE]
General architecture-dependent options  ---&gt;
   [*] Enable seccomp to safely compute untrusted bytecode [CONFIG_SECCOMP]
   [*] Stack Protector buffer overflow detection [CONFIG_STACKPROTECTOR]
   [*]   Strong Stack Protector [CONFIG_STACKPROTECTOR_STRONG]
Networking support  ---&gt;
  Networking options  ---&gt;
   &lt;*&gt; The IPv6 protocol [CONFIG_IPV6]
Device Drivers  ---&gt;
  Generic Driver Options  ---&gt;
   [ ] Support for uevent helper [CONFIG_UEVENT_HELPER]
   [*] Maintain a devtmpfs filesystem to mount at /dev [CONFIG_DEVTMPFS]
   [*]   Automount devtmpfs at /dev, after the kernel mounted the rootfs [CONFIG_DEVTMPFS_MOUNT]
   Firmware Loader ---&gt;
      [ ] Enable the firmware sysfs fallback mechanism [CONFIG_FW_LOADER_USER_HELPER]
  Firmware Drivers   ---&gt;
   [*] Export DMI identification via sysfs to userspace [CONFIG_DMIID]
  Graphics support ---&gt;
   Frame buffer Devices ---&gt;
      &lt;*&gt; Support for frame buffer devices ---&gt;
File systems  ---&gt;
   [*] Inotify support for userspace [CONFIG_INOTIFY_USER]
       Pseudo filesystems  ---&gt;
        [*] Tmpfs POSIX Access Control Lists [CONFIG_TMPFS_POSIX_ACL]</screen>

      <para>Включите некоторые дополнительные параметры, если вы создаете 64-битную
       систему. Если вы используете menuconfig, включите их в следующем порядке: сначала
       <parameter>CONFIG_PCI_MSI</parameter>, затем
       <parameter>CONFIG_IRQ_REMAP</parameter>, и, наконец, 
       <parameter>CONFIG_X86_X2APIC</parameter>, это связано с тем что каждый следующий 
	   вариант появляется после включения зависимостей.</para>

      <screen role="nodump">Processor type and features ---&gt;
  [*] Support x2apic [CONFIG_X86_X2APIC]
Device Drivers ---&gt;
  [*] PCI Support ---&gt; [CONFIG_PCI]
    [*] Message Signaled Interrupts (MSI and MSI-X) [CONFIG_PCI_MSI]
  [*] IOMMU Hardware Support ---&gt; [CONFIG_IOMMU_SUPPORT]
    [*] Support for Interrupt Remapping [CONFIG_IRQ_REMAP]</screen>
    </note>

    <note revision="systemd">
      <para>Хотя "Протокол IPv6" не является строго обязательным, он настоятельно рекомендуется 
	  разработчиками systemd.</para>
    </note>

    <para revision="sysv">Есть несколько других параметров, которые могут понадобиться 
	в зависимости от особенностей системы. Для получения списка необходимых опций для пакетов BLFS 
	смотрите <ulink
    url="&lfs-root;blfs/view/&short-version;/longindex.html#kernel-config-index">Список опций ядра BLFS</ulink>
    (&lfs-root;blfs/view/&short-version;/longindex.html#kernel-config-index).</para>

    <note>
      <para>Если ваша хост поддерживает UEFI и вы хотите загрузить LFS с помощью него, вам необходимо 
	  настроить некоторые параметры ядра, следуя инструкции 
	  <ulink url="&blfs-book;postlfs/grub-setup.html#uefi-kernel">на странице BLFS</ulink>.</para>
    </note>

    <variablelist>
      <title>Пояснения для выбранных выше параметров ядра:</title>

      <varlistentry>
        <term><parameter>Randomize the address of the kernel image (KASLR)</parameter></term>
        <listitem>
          <para>Включить ASLR для ядра, чтобы уменшить вероятность атаки на фиксированные адреса 
		  конфиденциальных данных или кода в ядре.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>
            Compile the kernel with warnings as errors
          </parameter>
        </term>
        <listitem>
          <para>Включение этого параметра может привести к сбою сборки, если компилятор и/или конфигурация отличается 
		  от конфигурации ядра разработчиков.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>
            Enable kernel headers through /sys/kernel/kheaders.tar.xz
          </parameter>
        </term>
        <listitem>
          <para>Для сборки ядра с этим параметром необходим пакет <command>cpio</command>.
          <command>cpio</command> не устанавливается в LFS.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>Strong Stack Protector</parameter></term>
        <listitem>
          <para>Включите SSP для ядра. Мы включили его для всего пользовательского пространства 
		  с помощью параметра <parameter>--enable-default-ssp</parameter> в настройках GCC, но ядро 
		  не использует настройки GCC по умолчанию для SSP. Здесь мы включаем это явно.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>Support for uevent helper</parameter></term>
        <listitem>
          <para>Включение этого параметра может вызвать сбои при управление устройствами через Udev/Eudev.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>Maintain a devtmpfs</parameter></term>
        <listitem>
          <para>С помощью этого параметра узлы устройств создаются автоматически и заполняются самим 
		  ядром, даже без запуска Udev. Udev будет работать поверх, управляя разрешениями и добавляя 
		  необходимые символические ссылки. Этот элемент конфигурации необходим всем пользователям Udev/Eudev.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>Automount devtmpfs at /dev</parameter></term>
        <listitem>
          <para>Этот параметр позволит смонтировать представление ядра устройств в /dev при 
		  переключении на корневую файловую систему непосредственно перед запуском init.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>Support x2apic</parameter></term>
        <listitem>
          <para>Поддержка запуска 64-разрядного контроллера прерываний для x86 процессоров 
		  в режиме x2APIC. x2APIC может быть включен в BIOS на системах x86 и у ядра собранного 
		  без этой опции будет kernel panic при загрузке. Эта опция не окажет никакого эффекта, 
		  но и не причиняет вреда, если x2APIC отключен в BIOS.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>В качестве альтернативы, в некоторых ситуациях может быть уместно использование команды 
	<command>make oldconfig</command>. Смотрите файл <filename>README</filename> для получения 
	дополнительной информации.</para>

    <para>По желанию, вы можете пропустить настройку ядра, скопировав конфигурационный файл ядра 
	<filename>.config</filename>, из хост системы(если он доступен) в каталог куда было распаковано 
	ядро <filename class="directory">linux-&linux-version;</filename>. Однако, мы не рекомендуем 
	этот вариант. Намного лучше изучить все параметры меню и создать конфигурацию ядра с нуля.</para>

    <para>Скомпилируйте образ ядра и модули:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>При использовании модулей, могут потребоваться файлы конфигурации, которые расположены в 
	каталоге <filename class="directory">/etc/modprobe.d</filename>. Информация о модулях и конфигурации 
	ядра находится в <xref linkend="ch-scripts-udev"/> и в документации к ядру <filename
    class="directory">linux-&linux-version;/Documentation</filename>. Кроме этого, стоит ознакомиться с 
	руководством <filename>modprobe.d(5)</filename>.</para>

    <para>Если поддержка модулей не была отключена в параметрах ядра, установите модули с помощью:</para>

<screen><userinput remap="install">make modules_install</userinput></screen>

    <para>После окончания компиляции, необходимо выполнить еще несколько шагов для завершения 
	установки ядра. Некоторые файлы должны быть скопированы в каталог 
	<filename class="directory">/boot</filename>.</para>

    <caution>
      <para>Если хост система содержит отдельный раздел для каталога /boot, файлы скопированные ниже, 
	  должны находится в нём. Самый простой способ это сделать -  выполнить монтирование каталога /boot 
	  хост системы (вне chroot) к каталогу /mnt/lfs/boot перед тем, как продолжить. Из-под пользователя 
	  &root; в <emphasis>хост системе</emphasis> выполните команду:</para>

<screen role="nodump"><userinput>mount --bind /boot /mnt/lfs/boot</userinput></screen>
    </caution>

    <para>Путь к образу ядра может различаться в зависимости от используемой платформы. Имя файла, может 
	быть произвольным, но начинаться должно с <emphasis>vmlinuz</emphasis> для обеспечения 
	совместимости с автоматической настройкой процесса загрузки, описанного в следующем разделе. 
	Следующая команда предполагает архитектуру x86:</para>

<screen><userinput remap="install">cp -iv arch/x86/boot/bzImage /boot/vmlinuz-&linux-version;-lfs-&version;</userinput></screen>

    <para><filename>System.map</filename> - это символьный файл для ядра. Он содержит точки входа каждой 
	функции в API ядра, а также адреса структур данных для запущенного ядро. Он используется в качестве 
	ресурса при исследовании проблем с ядром. Выполните следующую команду для установки файла:</para>

<screen><userinput remap="install">cp -iv System.map /boot/System.map-&linux-version;</userinput></screen>

    <para>Файл конфигурации ядра <filename>.config</filename> создается на шаге <command>make menuconfig</command> 
	и содержит все параметры ядра, которое было скомпилировано только что. Рекомендуется сохранить этот 
	файл на будущее:</para>

<screen><userinput remap="install">cp -iv .config /boot/config-&linux-version;</userinput></screen>

    <para>Установите документацию ядра:</para>

<screen><userinput remap="install">install -d /usr/share/doc/linux-&linux-version;
cp -r Documentation/* /usr/share/doc/linux-&linux-version;</userinput></screen>

    <para>It is important to note that the files in the kernel source
    directory are not owned by <emphasis>root</emphasis>. Whenever a
    package is unpacked as user <emphasis>root</emphasis> (like we did
    inside chroot), the files have the user and group IDs of whatever
    they were on the packager's computer. This is usually not a problem
    for any other package to be installed because the source tree is
    removed after the installation. However, the Linux source tree is
    often retained for a long time.  Because of this, there is a chance
    that whatever user ID the packager used will be assigned to somebody
    on the machine. That person would then have write access to the kernel
    source.</para>

    <note>
      <para>In many cases, the configuration of the kernel will need to be
      updated for packages that will be installed later in BLFS.  Unlike
      other packages, it is not necessary to remove the kernel source tree
      after the newly built kernel is installed.</para>

      <para>If the kernel source tree is going to be retained, run
      <command>chown -R 0:0</command> on the <filename
      class="directory">linux-&linux-version;</filename> directory to ensure
      all files are owned by user <emphasis>root</emphasis>.</para>
    </note>

    <warning>
      <para>Some kernel documentation recommends creating a symlink from
      <filename class="symlink">/usr/src/linux</filename> pointing to the kernel
      source directory.  This is specific to kernels prior to the 2.6 series and
      <emphasis>must not</emphasis> be created on an LFS system as it can cause
      problems for packages you may wish to build once your base LFS system is
      complete.</para>
    </warning>

    <warning>
      <para>The headers in the system's <filename
      class="directory">include</filename> directory (<filename
      class="directory">/usr/include</filename>) should
      <emphasis>always</emphasis> be the ones against which Glibc was compiled,
      that is, the sanitised headers installed in <xref
      linkend="ch-tools-linux-headers"/>.  Therefore, they should
      <emphasis>never</emphasis> be replaced by either the raw kernel headers
      or any other kernel sanitized headers.</para>
    </warning>

  </sect2>

  <sect2 id="conf-modprobe" role="configuration">
    <title>Configuring Linux Module Load Order</title>

    <indexterm zone="conf-modprobe">
      <primary sortas="e-/etc/modprobe.d/usb.conf">/etc/modprobe.d/usb.conf</primary>
    </indexterm>

    <para>Most of the time Linux modules are loaded automatically, but
    sometimes it needs some specific direction.  The program that loads
    modules, <command>modprobe</command> or <command>insmod</command>, uses
    <filename>/etc/modprobe.d/usb.conf</filename> for this purpose.  This file
    needs to be created so that if the USB drivers (ehci_hcd, ohci_hcd and
    uhci_hcd) have been built as modules, they will be loaded in the correct
    order; ehci_hcd needs to be loaded prior to ohci_hcd and uhci_hcd in order
    to avoid a warning being output at boot time.</para>

    <para>Create a new file <filename>/etc/modprobe.d/usb.conf</filename> by running
    the following:</para>

<screen><userinput>install -v -m755 -d /etc/modprobe.d
cat &gt; /etc/modprobe.d/usb.conf &lt;&lt; "EOF"
<literal># Begin /etc/modprobe.d/usb.conf

install ohci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i ohci_hcd ; true
install uhci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i uhci_hcd ; true

# End /etc/modprobe.d/usb.conf</literal>
EOF</userinput></screen>

  </sect2>

  <sect2 id="contents-kernel" role="content">
    <title>Contents of Linux</title>

    <segmentedlist>
      <segtitle>Installed files</segtitle>
      <segtitle>Installed directories</segtitle>

      <seglistitem>
        <seg>config-&linux-version;,
        vmlinuz-&linux-version;-lfs-&version;,
        and System.map-&linux-version;</seg>
        <seg>/lib/modules, /usr/share/doc/linux-&linux-version;</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="config">
        <term><filename>config-&linux-version;</filename></term>
        <listitem>
          <para>Contains all the configuration selections for the kernel</para>
          <indexterm zone="ch-bootable-kernel config">
            <primary sortas="e-/boot/config">/boot/config-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lfskernel">
        <term><filename>vmlinuz-&linux-version;-lfs-&version;</filename></term>
        <listitem>
          <para>The engine of the Linux system. When turning on the computer,
          the kernel is the first part of the operating system that gets loaded.
          It detects and initializes all components of the computer's hardware,
          then makes these components available as a tree of files to the
          software and turns a single CPU into a multitasking machine capable
          of running scores of programs seemingly at the same time</para>
          <indexterm zone="ch-bootable-kernel lfskernel">
            <primary sortas="b-lfskernel">lfskernel-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="System.map">
        <term><filename>System.map-&linux-version;</filename></term>
        <listitem>
          <para>A list of addresses and symbols; it maps the entry points and
          addresses of all the functions and data structures in the
          kernel</para>
          <indexterm zone="ch-bootable-kernel System.map">
            <primary sortas="e-/boot/System.map">/boot/System.map-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
